table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
log.fit <- glm(Direction~Lag2 + log(Volume), data = week.train, family = "binomial")
log.prob <- predict(log.fit, week.test, type = "response")
log.pred <- rep("Down", 104)
log.pred[log.prob > .5] <- "Up"
table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
log.fit <- glm(Direction~Lag1 * Lag2 * Lag3, data = week.train, family = "binomial")
log.prob <- predict(log.fit, week.test, type = "response")
log.pred <- rep("Down", 104)
log.pred[log.prob > .5] <- "Up"
table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
# Using LDA
lda.fit <- lda(Direction~Lag2 + Volume, data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
lda.fit <- lda(Direction~Lag2 + log(Volume), data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
lda.fit <- lda(Direction~Lag1 * Lag2 *Lag3, data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
# Using KNN k = 3
train.x <- cbind(week.train$Lag2)
test.x <- cbind(week.test$Lag2)
train.direction <- c(week.train$Direction)
knn.fit <- knn(train.x,test.x,t(train.direction), k = 3)
table(knn.fit, week.test$Direction)
(16 + 42) / (16+42+19+27)
# Using KNN k = 5
train.x <- cbind(week.train$Lag2)
test.x <- cbind(week.test$Lag2)
train.direction <- c(week.train$Direction)
knn.fit <- knn(train.x,test.x,t(train.direction), k = 5)
table(knn.fit, week.test$Direction)
(15 + 39) / (15+39+22+28)
# Using QDA
qda.fit <- qda(Direction~Lag2 + Volume, data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
qda.fit <- qda(Direction~Lag2 = log(Volume), data = week.train)
# Using QDA
qda.fit <- qda(Direction~Lag2 + Volume, data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
qda.fit <- qda(Direction~Lag2 + log(Volume), data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
qda.fit <- qda(Direction~Lag1 * Lag2 * Lag3, data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
# Experimenting with data and classification
log.fit <- glm(Direction~Lag2 + Volume, data = week.train, family = "binomial")
log.prob <- predict(log.fit, week.test, type = "response")
log.pred <- rep("Down", 104)
log.pred[log.prob > .5] <- "Up"
table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
log.fit <- glm(Direction~Lag2 + log(Volume), data = week.train, family = "binomial")
log.prob <- predict(log.fit, week.test, type = "response")
log.pred <- rep("Down", 104)
log.pred[log.prob > .5] <- "Up"
table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
log.fit <- glm(Direction~Lag1 * Lag2 * Lag3, data = week.train, family = "binomial")
log.prob <- predict(log.fit, week.test, type = "response")
log.pred <- rep("Down", 104)
log.pred[log.prob > .5] <- "Up"
table(log.pred, week.test$Direction)
mean(log.pred == week.test$Direction)
# Using LDA
lda.fit <- lda(Direction~Lag2 + Volume, data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
lda.fit <- lda(Direction~Lag2 + log(Volume), data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
lda.fit <- lda(Direction~Lag1 * Lag2 * Lag3, data = week.train)
lda.prob <- predict(lda.fit, week.test)
lda.class <- lda.prob$class
table(lda.class, week.test$Direction)
mean(lda.class == week.test$Direction)
# Using QDA
qda.fit <- qda(Direction~Lag2 + Volume, data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
qda.fit <- qda(Direction~Lag2 + log(Volume), data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
qda.fit <- qda(Direction~Lag1 * Lag2 * Lag3, data = week.train)
qda.prob <- predict(qda.fit, week.test)
qda.class <- qda.prob$class
table(qda.class, week.test$Direction)
mean(qda.class == week.test$Direction)
# Using KNN k = 3
train.x <- cbind(week.train$Lag2)
test.x <- cbind(week.test$Lag2)
train.direction <- c(week.train$Direction)
knn.fit <- knn(train.x,test.x,t(train.direction), k = 3)
table(knn.fit, week.test$Direction)
(16 + 42) / (16+42+19+27)
# Using KNN k = 5
train.x <- cbind(week.train$Lag2)
test.x <- cbind(week.test$Lag2)
train.direction <- c(week.train$Direction)
knn.fit <- knn(train.x,test.x,t(train.direction), k = 5)
table(knn.fit, week.test$Direction)
(15 + 39) / (15+39+22+28)
load("fun.RData")
for(K in c(5,10)){
y = yobs
n = 1000
Nnc = 75
if(!isTRUE((K>1) && K<=n))
stop("Number of folds is invalid (K=",K," n=",n,"\n")
folds = matrix(sample(1:n), nrow = K)
D=as.matrix(expand.grid(seq(1,Nnc),0))
for(k in 1:K) D=cbind(D,rep(0,Nnc))
# Do the CV for a same range of nc as ealier
for(nc in 2:Nnc)
{
for(i in 1:K)
{
tx=folds[i,]
xtr=x[-tx,drop=FALSE]
ytr=y[-tx]
xte=x[tx,drop=FALSE]
yte=y[tx]
ntr=length(ytr)
nte=length(yte)
cuts=seq(0,1,length=nc)
X=NULL
for(j in 2:nc)
{
X=cbind(X,as.numeric(xtr<cuts[j] & xtr>cuts[j-1]))
}
fit=lm(ytr~X-1)
X=NULL
for(j in 2:nc)
{
X=cbind(X,as.numeric(xte<cuts[j] & xte>cuts[j-1]))
}
yhat=predict(fit,newdata=as.data.frame(X))
D[nc,i+1]=mean((yte-yhat)^2)
}
D[nc,K+2]=mean(D[nc,2:(K+1)])
}
D=D[2:Nnc,]
plot(D[,1],D[,K+2],type='l',lwd=2,ylim=c(0,1),xlab="Number of Components",ylab=paste("Cross-Validation Error (K=",K,")",sep=""))
for(j in 2:K+1) lines(D[,1],D[,j],col="grey")
lines(D[,1],D[,K+2],lwd=2)
best=which(D[,K+2]==min(D[,K+2]))
abline(v=best-1,lty=3,lwd=2)
abline(h=min(D[,K+2]),col="grey")
best - 1
}
load("fun.RData")
for(K in c(5,10)){
y = yobs
n = 1000
Nnc = 75
if(!isTRUE((K>1) && K<=n))
stop("Number of folds is invalid (K=",K," n=",n,"\n")
folds = matrix(sample(1:n), nrow = K)
D=as.matrix(expand.grid(seq(1,Nnc),0))
for(k in 1:K) D=cbind(D,rep(0,Nnc))
# Do the CV for a same range of nc as ealier
for(nc in 2:Nnc)
{
for(i in 1:K)
{
tx=folds[i,]
xtr=x[-tx,drop=FALSE]
ytr=y[-tx]
xte=x[tx,drop=FALSE]
yte=y[tx]
ntr=length(ytr)
nte=length(yte)
cuts=seq(0,1,length=nc)
X=NULL
for(j in 2:nc)
{
X=cbind(X,as.numeric(xtr<cuts[j] & xtr>cuts[j-1]))
}
fit=lm(ytr~X-1)
X=NULL
for(j in 2:nc)
{
X=cbind(X,as.numeric(xte<cuts[j] & xte>cuts[j-1]))
}
yhat=predict(fit,newdata=as.data.frame(X))
D[nc,i+1]=mean((yte-yhat)^2)
}
D[nc,K+2]=mean(D[nc,2:(K+1)])
}
D=D[2:Nnc,]
plot(D[,1],D[,K+2],type='l',lwd=2,ylim=c(0,1),xlab="Number of Components",ylab=paste("Cross-Validation Error (K=",K,")",sep=""))
for(j in 2:K+1) lines(D[,1],D[,j],col="grey")
lines(D[,1],D[,K+2],lwd=2)
best=which(D[,K+2]==min(D[,K+2]))
abline(v=best-1,lty=3,lwd=2)
abline(h=min(D[,K+2]),col="grey")
print(best - 1)
}
setwd("~/Ames_OSU")
setwd("~/Ames_OSU")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
training_set <- read_csv("train.csv")
testing_set <- read_csv("test_new.csv")
summary(training_set)
pairs(training_set[,c(4,5,20,21,27)])
pairs(training_set[,c(35,37,38,39)])
pairs(training_set[,c(44:48)])
pairs(training_set[,c(48:53)])
pairs(training_set[,c(55,57,60,62,63)])
pairs(training_set[,c(67:71)])
pairs(training_set[,c(72,76:78)])
pairs(training_set[,c(4,5,27,35,44,63,67)])
plot(y=training_set$SalePrice, x=as.factor(training_set$MSSubClass))
plot(y=training_set$SalePrice, x=as.factor(training_set$MSZoning))
plot(y=training_set$SalePrice, x=as.factor(training_set$LotShape))
plot(y=training_set$SalePrice, x=as.factor(training_set$Utilities))
plot(y=training_set$SalePrice, x=as.factor(training_set$LandSlope))
plot(y=training_set$SalePrice, x=as.factor(training_set$Neighborhood))
plot(y=training_set$SalePrice, x=as.factor(training_set$Condition1))
plot(y=training_set$SalePrice, x=as.factor(training_set$BldgType))
plot(y=training_set$SalePrice, x=as.factor(training_set$HouseStyle))
plot(y=training_set$SalePrice, x=as.factor(training_set$OverallQual))
plot(y=training_set$SalePrice, x=as.factor(training_set$OverallCond))
plot(y=training_set$SalePrice, x=as.factor(training_set$RoofStyle))
plot(y=training_set$SalePrice, x=as.factor(training_set$ExterQual))
plot(y=training_set$SalePrice, x=as.factor(training_set$Foundation))
plot(y=training_set$SalePrice, x=as.factor(training_set$BsmtCond))
plot(y=training_set$SalePrice, x=as.factor(training_set$Heating))
plot(y=training_set$SalePrice, x=as.factor(training_set$CentralAir))
plot(y=training_set$SalePrice, x=as.factor(training_set$KitchenQual))
plot(y=training_set$SalePrice, x=as.factor(training_set$GarageQual))
plot(y=training_set$SalePrice, x=as.factor(training_set$SaleType))
plot(y=training_set$SalePrice, x=as.factor(training_set$SaleCondition))
View(testing_set)
# Ethan's Work
str(testing_set)
# Ethan's Work
num_train <- fitler(is.numeric, training_set)
# Ethan's Work
num_train <- Filter(is.numeric, training_set)
# Ethan's Work
num_train <- Filter(is.numeric, training_set)
cor(num_train)
View(num_train)
View(training_set)
# Ethan's Work
density(training_set$SalePrice)
# Ethan's Work
plot(density(training_set$SalePrice))
# Ethan's Work
plot(density(training_set$SalePrice))
plot(density(rnorm(10000, mean(training_set$SalePrice,sd(training_set$SalePrice)))))
# Ethan's Work
plot(density(training_set$SalePrice))
fitdistr(training_set$SalePrice, "normal")
# Ethan's Work
plot(density(training_set$SalePrice))
lines(fitdistr(training_set$SalePrice, "normal"))
# Ethan's Work
plot(density(training_set$SalePrice))
plot(fitdistr(training_set$SalePrice, "normal"))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
plot(fitdistr(training_set$SalePrice, "normal"))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
curve(fitdistr(training_set$SalePrice, "normal"),dnorm(fitdistr(training_set$SalePrice, "normal")))
x <- fitdistr(training_set$SalePrice, "normal")
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
x <- fitdistr(training_set$SalePrice, "normal")
para <- x$estimate
curve(x, dnorm(x,para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
x <- fitdistr(training_set$SalePrice, "normal")
para <- x$estimate
curve(training_set$SalePrice, dnorm(training_set$SalePrice,para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
x <- fitdistr(training_set$SalePrice, "normal")
para <- x$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(training_set$SalePrice, dnorm(training_set$SalePrice,para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
x <- fitdistr(training_set$SalePrice, "normal")
para <- x$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(training_set$SalePrice,para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
x <- fitdistr(training_set$SalePrice, "normal")
para <- x$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(training_set$SalePrice,para[0],para[1]), col = 2, add = TRUE)
??curve()
?curve()
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(training_set$SalePrice,para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(training_set$SalePrice,para[0],para[1]))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(SalePrice,para[0],para[1]))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(training_set$SalePrice, para[0],para[1]))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x, para[0],para[1]))
# Ethan's Work
library(MASS)
x <- training_set$SalePrice
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x, para[0],para[1]))
# Ethan's Work
library(MASS)
x <- training_set$SalePrice
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x, para[0],para[1]), col = 2, add = TRUE)
para
# Ethan's Work
library(MASS)
x <- training_set$SalePrice
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(500, para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
x <- training_set$SalePrice
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(length(x), para[0],para[1]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
x <- training_set$SalePrice
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
hist(training_set$SalePrice, prob = TRUE)
plot(density(rnorm(1000,para[0],para[1])))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[0],para[1])
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x,para[0],para[1]))
x
para[0]
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, as.numeric(para[0]), as.numeric(para[1]))
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x,para[0],para[1]))
as.numeric(para[0])
para
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x,para[1],para[2]))
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE)
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
plot(density(training_set$SalePrice))
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 20)
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 20)
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 25)
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 25, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 50, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 40, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 30, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 20, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
# Ethan's Work
library(MASS)
fit <- fitdistr(training_set$SalePrice, "normal")
para <- fit$estimate
x <- rnorm(1000, para[1],para[2])
hist(training_set$SalePrice, prob = TRUE, breaks = 20, xlab = "Sale Price ($)", ylab = "Density")
curve(dnorm(x,para[1],para[2]), col = 2, add = TRUE)
